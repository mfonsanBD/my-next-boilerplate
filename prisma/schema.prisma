// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  type      String
  status    String    @default("ativo")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model StreetVendorActivityType {
  id           String         @id @default(cuid())
  name         String
  streetVendor StreetVendor[]
}

model StreetVendor {
  id             String                   @id @default(cuid())
  name           String
  cpf            String                   @unique
  cep            String
  place          String
  complement     String?
  number         String?
  neighborhood   String
  city           String
  phone          String
  email          String                   @unique
  activityTypeId String
  activityType   StreetVendorActivityType @relation(fields: [activityTypeId], references: [id])
  notes          String?
  status         String                   @default("ativo")
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
}

model VanLicenseeModalType {
  id          String        @id @default(cuid())
  name        String
  vanLicensee VanLicensee[]
}

model VanLicensee {
  id           String               @id @default(cuid())
  name         String
  cpf          String               @unique
  cep          String
  place        String
  complement   String?
  number       String?
  neighborhood String
  city         String
  phone        String
  email        String               @unique
  modalTypeId  String
  modalType    VanLicenseeModalType @relation(fields: [modalTypeId], references: [id])
  notes        String?
  status       String               @default("ativo")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

enum ConstructionManagerType {
  MEIOAMBIENTE
  URBANISMO
}

model ConstructionManager {
  id              String                  @id @default(cuid())
  name            String
  document        String                  @unique
  place           String
  number          String?
  complement      String?
  neighborhood    String
  city            String
  cep             String
  phone           String
  email           String                  @unique
  type            ConstructionManagerType
  createdAt       DateTime                @default(now())
  EmbargoedWorks  EmbargoedWorks[]
  WorksInProgress WorksInProgress[]
}

model EmbargoedWorks {
  id                    String              @id @default(cuid())
  constructionManagerId String
  embargoNumber         String
  embargoFile           String
  place                 String
  number                String?
  complement            String?
  neighborhood          String
  city                  String
  cep                   String
  constructionManager   ConstructionManager @relation(fields: [constructionManagerId], references: [id])
}

model WorksInProgress {
  id                     String              @id @default(cuid())
  constructionManagerId  String
  infractionNoticeNumber String
  infractionNoticeFile   String
  intimationNumber       String
  intimationFile         String
  place                  String
  number                 String?
  complement             String?
  neighborhood           String
  city                   String
  cep                    String
  constructionManager    ConstructionManager @relation(fields: [constructionManagerId], references: [id])
}
